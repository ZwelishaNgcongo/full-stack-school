generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id
  username String @unique
}

model Student {
  id          String       @id @default(cuid())
  studentId   String       @unique // school-assigned student ID
  username    String       @unique
  name        String
  surname     String
  email       String? // ← REMOVED @unique constraint
  phone       String? // ← REMOVED @unique constraint  
  address     String?
  img         String?
  password    String
  sex         UserSex
  createdAt   DateTime     @default(now())
  parentId    String?
  parent      Parent?      @relation(fields: [parentId], references: [id])
  classId     Int
  class       Class        @relation(fields: [classId], references: [id])
  gradeId     Int
  grade       Grade        @relation(fields: [gradeId], references: [id])
  attendances Attendance[]
  results     Result[]
  birthday    DateTime
}

model Teacher {
  id        String    @id @default(cuid())
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique // Teachers can keep unique email
  phone     String?   @unique // Teachers can keep unique phone
  address   String
  img       String?
  password  String
  sex       UserSex
  createdAt DateTime  @default(now())
  subjects  Subject[] @relation("SubjectTeachers")
  lessons   Lesson[]
  classes   Class[]
  birthday  DateTime
}

model Parent {
  id        String    @id @default(uuid())
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique // Parents can keep unique email
  phone     String?
  address   String?
  password  String
  students  Student[] // Relation to students
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Grade {
  id    Int @id @default(autoincrement())
  level Int @unique

  students Student[]
  classess Class[]
}

model Class {
  id       Int    @id @default(autoincrement())
  name     String @unique
  capacity Int

  supervisorId  String?
  supervisor    Teacher?       @relation(fields: [supervisorId], references: [id])
  lessons       Lesson[]
  students      Student[]
  gradeId       Int
  grade         Grade          @relation(fields: [gradeId], references: [id])
  events        Event[]
  announcements Announcement[]
}

model Subject {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  teachers Teacher[] @relation("SubjectTeachers")
  lessons  Lesson[]
}

model Lesson {
  id        Int      @id @default(autoincrement())
  name      String
  day       Day
  startTime DateTime
  endTime   DateTime

  subjectId   Int
  subject     Subject      @relation(fields: [subjectId], references: [id])
  classId     Int
  class       Class        @relation(fields: [classId], references: [id])
  teacherId   String
  teacher     Teacher      @relation(fields: [teacherId], references: [id])
  exams       Exam[]
  assignments Assignment[]
  attendances Attendance[]
}

model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime

  lessonId Int
  lesson   Lesson   @relation(fields: [lessonId], references: [id])
  results  Result[]
}

model Assignment {
  id          Int      @id @default(autoincrement())
  title       String
  startDate   DateTime
  dueDate     DateTime
  description String? // Add this line - it's optional (nullable)
  fileUrl     String?  // ADD THIS LINE
  lessonId Int
  lesson   Lesson   @relation(fields: [lessonId], references: [id])
  results  Result[]
}

model Result {
  id    Int @id @default(autoincrement())
  score Int

  examId       Int?
  exam         Exam?       @relation(fields: [examId], references: [id])
  assignmentId Int?
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  studentId    String
  student      Student     @relation(fields: [studentId], references: [id])
  @@unique([examId, studentId])         // Optional: prevent duplicate exam results
  @@unique([assignmentId, studentId])   // Optional: prevent duplicate assignment results
  @@index([studentId])                  // Optional: faster student queries
  @@index([examId])                     // Optional: faster exam queries
  @@index([assignmentId])               // Optional: faster assignment queries
}

model Attendance {
  id      Int      @id @default(autoincrement())
  date    DateTime
  present Boolean

  studentId String
  student   Student @relation(fields: [studentId], references: [id])
  lessonId  Int
  lesson    Lesson  @relation(fields: [lessonId], references: [id])
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime

  classId Int?
  class   Class? @relation(fields: [classId], references: [id])
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime

  classId Int?
  class   Class? @relation(fields: [classId], references: [id])
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}
