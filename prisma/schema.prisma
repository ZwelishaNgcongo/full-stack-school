generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id
  username String @unique
}

model Student {
  id          String       @id @default(cuid())
  username    String       @unique
  name        String
  surname     String
  email       String?
  phone       String?
  address     String?
  img         String?
  sex         UserSex
  createdAt   DateTime     @default(now())
  parentId    String?
  classId     Int
  gradeId     Int
  birthday    DateTime
  password    String
  studentId   String       @unique
  attendances Attendance[]
  reports     Report[]
  results     Result[]
  class       Class        @relation(fields: [classId], references: [id])
  grade       Grade        @relation(fields: [gradeId], references: [id])
  parent      Parent?      @relation(fields: [parentId], references: [id])
}

model Teacher {
  id        String    @id @default(cuid())
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique
  phone     String?   @unique
  address   String
  img       String?
  sex       UserSex
  createdAt DateTime  @default(now())
  birthday  DateTime
  password  String
  classes   Class[]
  lessons   Lesson[]
  subjects  Subject[] @relation("SubjectTeachers")
}

model Parent {
  id        String    @id @default(uuid())
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique
  phone     String?
  address   String?
  createdAt DateTime  @default(now())
  password  String
  updatedAt DateTime  @updatedAt
  students  Student[]
}

model Grade {
  id       Int       @id @default(autoincrement())
  level    Int       @unique
  classess Class[]
  students Student[]
}

model Class {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  capacity      Int
  supervisorId  String?
  gradeId       Int
  announcements Announcement[]
  grade         Grade          @relation(fields: [gradeId], references: [id])
  supervisor    Teacher?       @relation(fields: [supervisorId], references: [id])
  events        Event[]
  lessons       Lesson[]
  students      Student[]
}

model Subject {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  lessons  Lesson[]
  reports  Report[]
  teachers Teacher[] @relation("SubjectTeachers")
}

model Lesson {
  id          Int          @id @default(autoincrement())
  name        String
  day         Day
  startTime   DateTime
  endTime     DateTime
  subjectId   Int
  classId     Int
  teacherId   String
  assignments Assignment[]
  attendances Attendance[]
  exams    ExamLesson[]
  
  class       Class        @relation(fields: [classId], references: [id])
  subject     Subject      @relation(fields: [subjectId], references: [id])
  teacher     Teacher      @relation(fields: [teacherId], references: [id])
}

model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  lessons   ExamLesson[]
  results   Result[]
}

model ExamLesson {
  id       Int @id @default(autoincrement())
  examId   Int
  lessonId Int
  
  exam     Exam   @relation(fields: [examId], references: [id], onDelete: Cascade)
  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([examId, lessonId])
  @@index([examId])
  @@index([lessonId])
}

model Assignment {
  id          Int      @id @default(autoincrement())
  title       String
  startDate   DateTime
  dueDate     DateTime
  lessonId    Int
  description String?
  fileUrl     String?
  lesson      Lesson   @relation(fields: [lessonId], references: [id])
  results     Result[]
}

model Result {
  id           Int         @id @default(autoincrement())
  score        Int
  examId       Int?
  assignmentId Int?
  studentId    String
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  exam         Exam?       @relation(fields: [examId], references: [id])
  student      Student     @relation(fields: [studentId], references: [id])

  @@unique([examId, studentId])
  @@unique([assignmentId, studentId])
  @@index([studentId])
  @@index([examId])
  @@index([assignmentId])
}

model Attendance {
  id        Int      @id @default(autoincrement())
  date      DateTime
  present   Boolean
  studentId String
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  student   Student  @relation(fields: [studentId], references: [id])
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
  classId     Int?
  class       Class?   @relation(fields: [classId], references: [id])
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime
  classId     Int?
  class       Class?   @relation(fields: [classId], references: [id])
}

model Report {
  id             Int      @id @default(autoincrement())
  studentId      String
  subjectId      Int
  term           Term
  year           Int
  marks          Int
  grade          String
  teacherComment String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  student        Student  @relation(fields: [studentId], references: [id])
  subject        Subject  @relation(fields: [subjectId], references: [id])

  @@unique([studentId, subjectId, term, year])
  @@index([studentId])
  @@index([term])
  @@index([year])
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

enum Term {
  TERM1
  TERM2
  TERM3
  TERM4
}
